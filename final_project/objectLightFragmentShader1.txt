#version 330

out vec4 FragColor; // some vec4 must be out'd to be decide final pixel colour

// catch values passed out from vertex shader with same name
in vec4 vertexColour;
in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;

// we need a sampler to hold reference to the texture we wish to use
// and this sample will help us spread/wrap the texture across our polygon or shape
uniform sampler2D diffuseMap;   //used to describe base colours across surface
uniform sampler2D specularMap;   //used to describe which parts are how shiny

uniform vec3 objectColour;
uniform vec3 lightColour;
uniform vec3 lightPos; //where the light in the world is
uniform vec3 viewPos;// where the camera is 


void main(){
	//ambient lighting (light colour bouncing around the world/room)
	float ambientStrength = 0.5;
	vec3 ambient = ambientStrength*lightColour * vec3(texture(diffuseMap, TexCoord));//basically a super dark version of lightColour

	//Diffuse (how directly the light is hitting this object
	vec3 norm = normalize(Normal); // normalize makes values min -1 and max 1;
	vec3 lightDir = normalize(lightPos - FragPos);

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff*lightColour*vec3(texture(diffuseMap,TexCoord));
		
	//Specular(shininess based on how direct light bounces off object into your eye)
	vec3 viewDir = normalize(viewPos- FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	
	//32 is how pinpointed the light should be, bigger number, more pinpointed
	float spec = pow(max(dot(viewDir, reflectDir),0.0),32);
	vec3 specular = spec*lightColour*vec3(texture(specularMap,TexCoord));


	vec3 result = (ambient+diffuse+specular);

	if(FragPos.x > 0.5)
		result = (ambient+diffuse+specular);
	else if(FragPos.x > -0.7 && FragPos.x <0.5)
		result = vec3(1,0,0);
	else if(FragPos.x > -1 && FragPos.x < -0.7)
		result = vec3(0.5,0.5,0);
	else if(FragPos.x > -1.2 && FragPos.x < -1)
		result = vec3(0.5,0,0.5);
	else 
		result = vec3(0,1,0);
	
	FragColor = vec4(result, 1.0);
}